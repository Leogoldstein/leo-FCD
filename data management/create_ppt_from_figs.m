function create_ppt_from_figs(selected_groups, gcamp_data_groups, gcamp_output_folders_groups, daytime)

    import mlreportgen.ppt.*;

    % Chemin du fichier PPT
    pptFileName = fullfile('D:\Imaging\Outputs\Presentations', sprintf('AnalysisFigures_%s.pptx', daytime));
    
    % Créer présentation
    ppt = Presentation(pptFileName);
    open(ppt);
    
    % Diapositive d'accueil
    slide = add(ppt, 'Title Slide');
    replace(slide, 'Title', 'Analysis Results');
    replace(slide, 'Subtitle', 'Generated by MATLAB');
    
    % Importation des données
    DF_groups = gcamp_data_groups.DF_groups;
    MAct_groups = gcamp_data_groups.MAct_groups;
    sampling_rate_groups = gcamp_data_groups.sampling_rate_groups;
    Raster_groups = gcamp_data_groups.Raster_groups;
    Race_groups = gcamp_data_groups.Race_groups;
    TRace_groups = gcamp_data_groups.TRace_groups;
    sce_n_cells_threshold_groups = gcamp_data_groups.sce_n_cells_threshold_groups;
    sces_distances_groups = gcamp_data_groups.sces_distances_groups;

    for k = 1:length(selected_groups)
        
        % Infos groupe courant
        current_animal_group = selected_groups(k).animal_group;
        current_ani_path_group = selected_groups(k).path;
        current_ages_group = selected_groups(k).ages;
        current_env_group = selected_groups(k).env;
        
        gcamp_output_folders = gcamp_output_folders_groups{k};
        
        DF = DF_groups{k};
        sampling_rate = sampling_rate_groups{k};
        Raster = Raster_groups{k};
        MAct = MAct_groups{k};
        Race = Race_groups{k};
        TRace = TRace_groups{k};
        sce_n_cells_threshold = sce_n_cells_threshold_groups{k};
        sces_distances = sces_distances_groups{k};
        
        % Slide titre animal
        slide = add(ppt, 'Title Slide');
        replace(slide, 'Title', current_animal_group);
        
        % Infos et analyses
        [all_recording_time, all_optical_zoom, all_depth, all_duration_minutes] = find_recording_infos(gcamp_output_folders, current_env_group);
        [NCell_all, mean_frequency_per_minute_all, std_frequency_per_minute_all, ~] = basic_metrics(DF, Raster, MAct, gcamp_output_folders, sampling_rate);
        [all_num_sces, all_sce_frequency_seconds, all_avg_active_cell_SCEs, all_prop_active_cell_SCEs, all_avg_duration_ms] = SCEs_analysis(TRace, sampling_rate, Race, Raster, sces_distances, gcamp_output_folders);
        
        % -- Créer les tables --
        paramTable = createAnimalParametersTable(current_ages_group, all_depth, all_optical_zoom, DF);
        paramTable1 = createNetworkActivityTable(current_ages_group, NCell_all, mean_frequency_per_minute_all);
        paramTable2 = createSCEsParametersTable(current_ages_group, sce_n_cells_threshold, all_num_sces, all_sce_frequency_seconds, all_avg_active_cell_SCEs, all_prop_active_cell_SCEs, all_avg_duration_ms);
        
        % -- Ajouter les tables --
        addTableSlide(ppt, 'Animal Parameters', paramTable);
        
        % -- Ajouter figures locales et dossier output --
        addFiguresFromFolder(ppt, current_ani_path_group);
        for path_idx = 1:length(gcamp_output_folders)
            addFiguresFromFolder(ppt, gcamp_output_folders{path_idx});
        end
        
        addTableSlide(ppt, 'Activity of the Network', paramTable1);
        addTableSlide(ppt, 'SCEs Parameters', paramTable2);

    end

    close(ppt);
    fprintf('PowerPoint saved at: %s\n', pptFileName);
end

function paramTable = createAnimalParametersTable(ages, depths, zooms, DF)
    import mlreportgen.ppt.*;

    paramTable = Table();
    paramTable.ColSpecs = repmat(ColSpec('2in'), 1, 4);
    
    headerRow = TableRow();
    headerRow.Style = {Bold(true)};
    append(headerRow, TableEntry(Paragraph('Animal Age')));
    append(headerRow, TableEntry(Paragraph('Depth')));
    append(headerRow, TableEntry(Paragraph('Optical Zoom')));
    append(headerRow, TableEntry(Paragraph('Number of Cells')));
    append(paramTable, headerRow);

    for i = 1:length(ages)
        row = TableRow();
        append(row, TableEntry(Paragraph(string(ages{i}))));
        append(row, TableEntry(Paragraph(string(depths{i}))));
        append(row, TableEntry(Paragraph(string(zooms{i}))));
        append(row, TableEntry(Paragraph(string(size(DF{i}, 1)))));
        append(paramTable, row);
    end
end

function paramTable = createNetworkActivityTable(ages, NCell_all, mean_freq_all)
    import mlreportgen.ppt.*;

    paramTable = Table();
    paramTable.ColSpecs = repmat(ColSpec('2in'), 1, 3);
    
    headerRow = TableRow();
    headerRow.Style = {Bold(true)};
    append(headerRow, TableEntry(Paragraph('Animal Age')));
    append(headerRow, TableEntry(Paragraph('Active Cells Number')));
    append(headerRow, TableEntry(Paragraph('Mean Frequency (min)')));
    append(paramTable, headerRow);

    for i = 1:length(NCell_all)
        row = TableRow();
        append(row, TableEntry(Paragraph(string(ages{i}))));
        append(row, TableEntry(Paragraph(string(NCell_all(i)))));
        append(row, TableEntry(Paragraph(string(mean_freq_all(i)))));
        append(paramTable, row);
    end
end

function paramTable = createSCEsParametersTable(ages, thresholds, num_sces, freq_sces, mean_active_cells, perc_active_cells, mean_durations)
    import mlreportgen.ppt.*;

    paramTable = Table();
    paramTable.ColSpecs = repmat(ColSpec('1.5in'), 1, 7); % Plus de colonnes = un peu plus étroit
    
    headerRow = TableRow();
    headerRow.Style = {Bold(true)};
    headers = {'Animal Age', 'SCEs Threshold', 'SCEs Number', 'SCEs Frequency (Hz)', 'Mean Active Cells SCEs', 'Percentage Active Cells SCEs', 'Mean SCEs Duration (ms)'};
    for i = 1:length(headers)
        append(headerRow, TableEntry(Paragraph(headers{i})));
    end
    append(paramTable, headerRow);

    for i = 1:length(num_sces)
        row = TableRow();
        append(row, TableEntry(Paragraph(string(ages{i}))));
        append(row, TableEntry(Paragraph(string(thresholds{i}))));
        append(row, TableEntry(Paragraph(string(num_sces(i)))));
        append(row, TableEntry(Paragraph(string(freq_sces(i)))));
        append(row, TableEntry(Paragraph(string(mean_active_cells(i)))));
        append(row, TableEntry(Paragraph(string(perc_active_cells(i)))));
        append(row, TableEntry(Paragraph(string(mean_durations(i)))));
        append(paramTable, row);
    end
end

function addTableSlide(ppt, titleText, tableContent)
    slide = add(ppt, 'Title and Table');
    replace(slide, 'Title', titleText);
    replace(slide, 'Table', tableContent);
end

function addFiguresFromFolder(ppt, folder_path)
    import mlreportgen.ppt.*;

    png_files = dir(fullfile(folder_path, '*.png'));
    for i = 1:length(png_files)
        figure_path = fullfile(png_files(i).folder, png_files(i).name);
        slide = add(ppt, 'Title and Content');
        [~, name, ~] = fileparts(png_files(i).name);
        name = strrep(name, '_', ' ');

        replace(slide, 'Title', name);
        img = Picture(figure_path);
        replace(slide, 'Content', img);
    end
end